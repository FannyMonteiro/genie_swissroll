$Id: README 3308 2007-06-08 16:13:32Z gethin-williams $



*****STOP PRESS***********************************

THE CONTENTS OF THIS FILE ARE NOW MOSTLY OBSELETE.
FOR THE LATEST GENIE DOCUMENTATION SEE:

http://source.ggy.bris.ac.uk/wiki/GENIE

*****STOP PRESS***********************************





===========================================================
===========================================================
               == THE GENIE FRAMEWORK ==
   INSTRUCTIONS FOR OBTAINING, COMPILING, AND RUNNING 

===========================================================
===========================================================


===========================================================
Contents:

 - Prerequisites
 - Obtaining the GENIE Source Code
 - Compiling
 - Running the Default Model
 - Running Different Configurations
 - Common Problems
 - Appendix:  Some Useful CVS Commands

Please feel free to edit/add to this file to make it 
easier to understand and use.

If the 'Common problems' section doesn't help, then questions
are best addressed to: 
 - Dan Lunt <d.j.lunt@bristol.ac.uk>
or:
 - Gethin Williams <Gethin.Williams@bristol.ac.uk>

It is assumed that you are running under linux/unix.
For windows installation, contact:
 - Andrew Price <A.R.Price@soton.ac.uk>

===========================================================


===========================================================
Prerequisites
===========================================================

The GENIE code-base is kept in a CVS repository.  You will
need CVS installed on your machine in order to download a
copy of the code from the repository.

Useful websites for cvs include:
 - http://www.lesc.ic.ac.uk/iceni/developers/cvsGuide.html
 - http://www.lesc.ic.ac.uk/iceni/developers/cvsSSH.html
 - http://www.gnu.org/software/cvs/
 - http://www.wincvs.org/

Instructions for downloading GENIE are in the next section.

In order to compile the GENIE source code, you will need:
- a Fortran compiler
- a C compiler
- Python installed

To build the automatic documentation that accompanies the
code, would will also need:
- Perl installed

Your Fortran compiler must be f77 and f90 compliant for the
vanilla configuration, and f95 compliant if you wish to 
use the GLIMMER icesheet model.  A C program is used for
testing the code.  Python is used to automatically create
dependency rules from the source code for use by 'make' in 
the build process.

To create an executable, you will also need to link to the
NetCDF Fortran interface library.  The source code for the
NetCDF library can be downloaded from:
- http://www.unidata.ucar.edu/packages/netcdf/index.html

The above website and contains instructions for 
compiling and installing the library.
Note that the same compiler should be used to compile
both GENIE and the NetCDF library.  (Different compilers
may mangle names in the object files differently.  If
this is the case, library functions cannot be resolved.)

===========================================================
Obtaining the GENIE Source Code
===========================================================

To download a copy of the GENIE source code from the
repository, you will need:

 - a CVS username and password
 - a 'private key file'

The first two are obtainable from:
 - Keith Sephton <lesc-help@doc.ic.ac.uk>. 
Given these, you can download a private key file from:
 - http://www.lesc.ic.ac.uk/iceni/developers/cvsSSH.html

Procedure:

1) Create a directory called 'genie', which will hold your code.
   You will be required to edit fewer files if it resides in your 
   home directory (~/).

2) Into this directory, put your private-key-file.  Make sure it is
   readable only by you: chmod 400 private-key-file
   (Note filename is important.)

3) In an xterm, cd to your genie directory, and type:

ssh -2 -i private-key-file -l cvs-ssh saturn.icpc.doc.ic.ac.uk -L 2401:localhost:2401 proxy

   I alias this to 'cvsw' in my .kshrc file.  After a couple of 
   seconds it should say 'Sleeping for one hour'

4) In a different xterm, cd to your 'genie' directory, and type:

export CVSROOT=:pserver:????@localhost:/cvs/genie ; cvs login
          if you are using ksh or bash, or

setenv CVSROOT :pserver:????@localhost:/cvs/genie ; cvs login
          if you are using csh or tcsh.

   where ???? is your cvs username (mine is cvs-djl).  I alias this 
   to 'cvsp' in my .kshrc file.  You will be prompted for your 
   cvs password.

5) The GENIE framework consists of a series of 'modules'.  Most
   modules represent a part of the earth-system, e.g. atmosphere or
   ocean.  Some are more general.  
   The 'standard' GENIE framework can be downloaded ('checked out')
   onto your local machine by typing:

	cvs co all

   You may also check out modules individually, for example:

       cvs co genie-igcm3

===========================================================
Compiling 
===========================================================
 
There is, in principal, only one file which you will have 
to edit in order to compile the model: genie-main/makefile.arc

In makefile.arc:
  1) Edit F77 to be your fortran compiler (the default is ifort, other
  tested possibilities are commented). The compilation is conditional
  on this parameter so do not specify the full path to your compiler.

  2) Edit CC to be your C compiler (the default is gcc, other
  tested possibilities are commented)

  3) Edit MACHINE to be your machine type (the default is LINUX, other
  tested possibilities are commented)

  4) Edit NETCDF to be the name and path of your NetCDF fortran
     library (some examples are commented).  

  5) Edit GENIE_ROOT to be where your genie-??? folders live (default
     is .., i.e. usually in ~/genie )

  6) Edit OUT_DIR to where you would like the model output to go.

Set up your system environment appropriately for command line
compilation. ie. Make sure the compiler is on the system PATH.
To compile the model, cd to genie-main and invoke GNU make:
   'make' or 'gmake'

To test whether this has been successful, type:

** make assumedgood

followed by:

   make test

** NB The assumedgood files need only be created once.
Please treat your assumedgood files with care and do not remake 
any assumedgood files without good reason.  The assumedgood
files are the reference points for the tests.  The model outputs
should not change unless the underlying physics of the model is
changed.  Thus the tests should work with the same assumedgood
files unless the model outputs change for a known reason.

If disaster strikes, you can check out an older version of the
code, remake your assumedgood files, bring your checkout up to
date and proceed from there.

===========================================================
Running the Default Model
===========================================================

These instructions describe how to run a certain GENIE 'flavour'.
This flavour is the default and consists of the 'igcm' atmosphere 
(a fast but 3-d and dynamic atmospheric model), and very 
simple representations of seaice and the ocean, which are based 
on observations.

To run the model, cd to the genie-main directory and type: 

  ./genie_example.job

The code should run and complete a standard 1-month integration.

===========================================================
Running other GENIE models
===========================================================

Other standard GENIE models are run using configuration files.
There are some example files in genie-main/configs.
They consist of a list of modifications to the defaults 
contained in the standard genie_example.job file.  The simplest
config file is genie_ig_fi_fi.config.  This changes the experiment
name from the default, changes the run-length from one month to 
10 years and turns on daily igcm output.  This new run is carried 
out by typing:

  ./genie_example.job -f configs/genie_ig_fi_fi.config

(If you would like to use different code and output directories,
use -c <dir> and -o <dir> respectively.)

Before running config files, it is probably a good idea to check with
the person who wrote them, to see what they do!
The standard(ish) naming notation is:

  genie_aa_oo_ss_xxxx.config

where aa is the atmosphere name (ig=igcm, eb=embm)
      oo is the ocean name (fi=fixed, go=goldstein ocean, sl=slab)
      ss is the seaice name (fi=fixed,gs=goldstein seaice, sl=slab)
      xxxx is any more info.

===========================================================
Some Common Problems
===========================================================

1) If you have trouble compiling after you have updated, then try
   'make cleanall' in the genie-main directory, or 'make clean' in
   the directory src/fortran you are having trouble with.

2) If this still doesn't work, in particular after files has been 
   removed from
   cvs, you may need to remove all the *.dep files in the genie-main 
   directory, or in the directory src/fortran you are having trouble 
   with.  Then try a 'make cleanall'.

===========================================================
Appendix: Some Useful CVS Commands
===========================================================

====cvs GUI====
Try (if it is installed on your machine) 'tkcvs'--a GUI for CVS.
The tkdiff facility (yellow triangle) is particularly useful.
It highlights the differences between two files in a clear way.

====To log out====
cvs logout

====To "check out" a component====
cvs co genie-fixedocean

====To add a component (must be in the correct directory)====
cvs add fixedocean.f

====To add many components====
for file in $(ls *.f) ; do cvs add $file ; done

====To add a binary component====
cvs add -kb vegetation_new_t21.nc

====To commit a component====
cvs commit fixedocean.f
cvs commit -m "log file" fixedocean.f
cvs commit -m "log file" *.f
cvs commit -m "log file"

====To see whether your version is up to date:
cvs -n -q update -d

====To update local files
cvs update

====To update local directories
cvs update -d 

====To use the head version on CVS
    (useful if you have checked out a previous version)
cvs -n -q update -d -A

====To do a diff of what is in the repository:
cvs diff

====To add a directory (no need to commit):
cvs add <directory_name>

====To remove a component====
cvs remove fixedocean.f

====To revert from version 1.2 to version 1.1 on cvs====
cvs update -j 1.2 -j 1.1 genie-igcm3/param1.cmn genie-igcm3/pqsat.cmn
cvs update
cvs commit -m "reverting to 1.1" genie-igcm3/param1.cmn genie-igcm3/pqsat.cmn

====To retrieve an old version locally
cvs update -r 1.2 igcm_landsurface.f

====To retrieve the model-state at a certain time
cvs update -d -D "2004-06-29 14:00:00 GMT"

====To then revert to the present state
cvs update -d -A

====VERY USEFUL TIP:
Create a file '.cvsignore' in your home directory.  In this file you
can list files which you want CVS to ignore.  My .cvsignore file looks
like:
*.mod
*.dep
*NOCVS*
The dep and mod bits are useful for hiding temporary files made in
the build process.  The NOCVS bit is useful for temporary files you 
have created - just append 'NOCVS' to their name.
